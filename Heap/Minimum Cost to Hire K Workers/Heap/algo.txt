$ cat optimized_heap_algo.txt

------------------------------------------
Algorithm: Minimum Cost to Hire K Workers
Approach: Sort by Ratio + Max Heap
------------------------------------------

Input:
    - quality[] : array of worker qualities
    - wage[]    : array of minimum wages
    - k         : number of workers to hire

Output:
    - minimum total cost to hire k workers

Steps:

1. Create list of workers:
       worker[i] = (wage[i] / quality[i], quality[i])

2. Sort workers by ratio ascending.

3. Initialize:
       maxHeap = empty max-heap (store qualities)
       totalQuality = 0
       minCost = +âˆž

4. Iterate through workers (in sorted order):
       For each (ratio, q):
            - Add q to heap
            - totalQuality += q

            If heap.size == k:
                - Compute cost = ratio * totalQuality
                - minCost = min(minCost, cost)
                - Remove largest quality from heap
                  totalQuality -= removed

5. Return minCost

$ cat optimized_heap_dryrun.txt

Example:
    quality = [3,1,10,10,1]
    wage    = [4,8,2,2,7]
    k = 3

Step 1: Compute ratios
    Worker0: 4/3  = 1.33
    Worker1: 8/1  = 8.0
    Worker2: 2/10 = 0.2
    Worker3: 2/10 = 0.2
    Worker4: 7/1  = 7.0

Step 2: Sort by ratio
    [(0.2,10), (0.2,10), (1.33,3), (7.0,1), (8.0,1)]

Step 3-4: Iterate
    Add q=10 -> heap=[10], sum=10
    Add q=10 -> heap=[10,10], sum=20
    Add q=3  -> heap=[10,10,3], sum=23
        size==k -> cost=1.33*23=30.67 -> minCost=30.67
        remove largest (10), sum=13
    Add q=1  -> heap=[10,3,1], sum=14
        size==k -> cost=7*14=98 -> minCost=30.67
        remove largest (10), sum=4
    Add q=1  -> heap=[3,1,1], sum=5
        size==k -> cost=8*5=40 -> minCost=30.67
        remove largest (3), sum=2

Answer = 30.67


$ cat optimized_heap_complexity.txt

Time Complexity:
    - Build workers: O(n)
    - Sort workers by ratio: O(n log n)
    - Iterate with heap operations: O(n log k)
    => Total = O(n log n)

Space Complexity:
    - Workers array: O(n)
    - Heap: O(k)
    => Total = O(n + k)
