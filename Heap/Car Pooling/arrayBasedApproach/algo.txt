==================================================
Algorithm: Car Pooling using Difference Array
==================================================

Input:
  trips[i] = [numPassengers, from, to]
  capacity -> maximum car capacity

Goal:
  Ensure car never exceeds capacity.

--------------------------------------------------
Steps:
1. Create an array changes[1001] = {0}
   (because max coordinate = 1000)

2. For each trip [num, from, to]:
     - changes[from] += num   (pick up at "from")
     - changes[to]   -= num   (drop off at "to")

3. Initialize currentPassengers = 0

4. For location = 0 to 1000:
     - currentPassengers += changes[location]
     - If currentPassengers > capacity → return false

5. If loop finishes → return true

--------------------------------------------------
Example:
Trips = [[2,1,5],[3,3,7],[4,6,8]], capacity = 6

Step 1: Record changes
   Trip [2,1,5] -> changes[1]+=2, changes[5]-=2
   Trip [3,3,7] -> changes[3]+=3, changes[7]-=3
   Trip [4,6,8] -> changes[6]+=4, changes[8]-=4

Step 2: Sweep
   i=1: current=2
   i=3: current=2+3=5
   i=5: current=5-2=3
   i=6: current=3+4=7 ❌ > 6 → return false

Answer: false

--------------------------------------------------
Complexity Analysis:
- Time:
  Building difference array → O(N)
  Sweeping up to 1000 → O(1000) = O(1)
  Total = O(N)

- Space:
  changes[1001] → constant = O(1)

Final:
  Time Complexity  = O(N)
  Space Complexity = O(1)
