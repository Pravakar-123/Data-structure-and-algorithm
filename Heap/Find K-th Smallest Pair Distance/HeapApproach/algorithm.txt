=========================================================
   Algorithm: K-th Smallest Pair Distance (Heap Approach)
=========================================================

1. Data Structures:
   - Use a Max Heap (PriorityQueue in Java with reverse order).
   - Heap will store the k smallest pair distances.

---------------------------------------------------------
2. Steps:
   a) For every pair (i, j), where i < j:
         - Compute distance = |nums[i] - nums[j]|
         - Insert distance into max-heap
         - If heap size > k:
             - Remove the largest element from heap
       => Heap now contains only the k smallest distances seen so far.

   b) At the end:
         - The root of the max-heap is the k-th smallest distance.

---------------------------------------------------------
3. Pseudocode:
   function smallestDistancePair(nums, k):
       maxHeap = new PriorityQueue(reverse order)

       for i = 0 to n-1:
           for j = i+1 to n-1:
               dist = abs(nums[i] - nums[j])
               maxHeap.offer(dist)
               if maxHeap.size > k:
                   maxHeap.poll()

       return maxHeap.peek()

---------------------------------------------------------
4. Example:
   nums = [1, 3, 1], k = 1

   Pairs:
     (1,3) → 2
     (1,1) → 0
     (3,1) → 2

   Distances sorted = [0, 2, 2]
   Answer = 0 (1st smallest)

   Heap process:
     push 2 → [2]
     push 0 → [2,0] → pop 2 → [0]
     push 2 → [2,0] → pop 2 → [0]

   Result = 0

---------------------------------------------------------
5. Complexity:
   - Pair generation: O(n^2)
   - Each heap operation: O(log k)
   - Total = O(n^2 log k)
   - Space = O(k)

   ⚠️ Works for small n, but not efficient for very large arrays.
